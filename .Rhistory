dat.list<- df.to.list(dat = dat)
id<- unique(dat$id) %>% as.character()
n<- length(id)
obs.list<- vector("list", n)
names(obs.list)<- id
#calculate # of obs in each bin (per move param) by tseg
for (i in 1:length(dat.list)) {
dat.ind=dat.list[[i]]
ntseg=max(dat.ind$tseg)
#TA
TA<- matrix(0, ntseg, max(dat[[i]]$TA, na.rm = T))
colnames(TA)<- paste0("y1.",1:max(dat[[i]]$TA, na.rm = T))
for (j in 1:ntseg){
tmp<- dat.ind %>% filter(tseg == j) %>% dplyr::select(TA) %>% table()
TA[j,as.numeric(names(tmp))]<- tmp
}
#SL
SL<- matrix(0, ntseg, max(dat$SL, na.rm = T))
colnames(SL)<- paste0("y2.",1:max(dat$SL, na.rm = T))
for (j in 1:ntseg){
tmp<- dat.ind %>% filter(tseg == j) %>% dplyr::select(SL) %>% table()
SL[j,as.numeric(names(tmp))]<- tmp
}
id<- rep(unique(dat.ind$id) %>% as.character(), ntseg)
tseg<- 1:ntseg
behav.res<- cbind(id, tseg, TA, SL) %>% data.frame()
obs.list[[i]]<- behav.res
}
i=1
dat.ind=dat.list[[i]]
ntseg=max(dat.ind$tseg)
#TA
TA<- matrix(0, ntseg, max(dat[[i]]$TA, na.rm = T))
#TA
TA<- matrix(0, ntseg, max(dat$TA, na.rm = T))
colnames(TA)<- paste0("y1.",1:max(dat$TA, na.rm = T))
View(TA)
#------------------------------------------------
get.summary.stats_behav=function(dat){  #dat must have time.seg assigned; for all IDs
#create list of input and to store output
dat.list<- df.to.list(dat = dat)
id<- unique(dat$id) %>% as.character()
n<- length(id)
obs.list<- vector("list", n)
names(obs.list)<- id
#calculate # of obs in each bin (per move param) by tseg
for (i in 1:length(dat.list)) {
dat.ind=dat.list[[i]]
ntseg=max(dat.ind$tseg)
#TA
TA<- matrix(0, ntseg, max(dat$TA, na.rm = T))
colnames(TA)<- paste0("y1.",1:max(dat$TA, na.rm = T))
for (j in 1:ntseg){
tmp<- dat.ind %>% filter(tseg == j) %>% dplyr::select(TA) %>% table()
TA[j,as.numeric(names(tmp))]<- tmp
}
#SL
SL<- matrix(0, ntseg, max(dat$SL, na.rm = T))
colnames(SL)<- paste0("y2.",1:max(dat$SL, na.rm = T))
for (j in 1:ntseg){
tmp<- dat.ind %>% filter(tseg == j) %>% dplyr::select(SL) %>% table()
SL[j,as.numeric(names(tmp))]<- tmp
}
id<- rep(unique(dat.ind$id) %>% as.character(), ntseg)
tseg<- 1:ntseg
behav.res<- cbind(id, tseg, TA, SL) %>% data.frame()
obs.list[[i]]<- behav.res
}
#obs<- do.call(rbind.data.frame, obs.list)
obs<- map_dfr(obs.list, `[`)
obs[is.na(obs)]<- 0  #replace NAs w/ zero
obs
}
obs<- get.summary.stats_behav(dat)  #to run Gibbs sampler on
warnings()
#create list of input and to store output
dat.list<- df.to.list(dat = dat)
id<- unique(dat$id) %>% as.character()
n<- length(id)
obs.list<- vector("list", n)
names(obs.list)<- id
#calculate # of obs in each bin (per move param) by tseg
for (i in 1:length(dat.list)) {
dat.ind=dat.list[[i]]
ntseg=max(dat.ind$tseg)
#TA
TA<- matrix(0, ntseg, max(dat$TA, na.rm = T))
colnames(TA)<- paste0("y1.",1:max(dat$TA, na.rm = T))
for (j in 1:ntseg){
tmp<- dat.ind %>% filter(tseg == j) %>% dplyr::select(TA) %>% table()
TA[j,as.numeric(names(tmp))]<- tmp
}
#SL
SL<- matrix(0, ntseg, max(dat$SL, na.rm = T))
colnames(SL)<- paste0("y2.",1:max(dat$SL, na.rm = T))
for (j in 1:ntseg){
tmp<- dat.ind %>% filter(tseg == j) %>% dplyr::select(SL) %>% table()
SL[j,as.numeric(names(tmp))]<- tmp
}
id<- rep(unique(dat.ind$id) %>% as.character(), ntseg)
tseg<- 1:ntseg
behav.res<- cbind(id, tseg, TA, SL) %>% data.frame()
obs.list[[i]]<- behav.res
}
View(obs.list)
View(obs.list[["SNIK 25"]])
View(obs.list[["SNAK 04"]])
View(obs.list[["SNAK 04"]])
View(obs.list[["SNAI 08"]])
#obs<- do.call(rbind.data.frame, obs.list)
obs<- map_dfr(obs.list, `[`)
str(obs.list[[1]])
i=1
#create list of input and to store output
dat.list<- df.to.list(dat = dat)
id<- unique(dat$id) %>% as.character()
n<- length(id)
obs.list<- vector("list", n)
names(obs.list)<- id
dat.ind=dat.list[[i]]
ntseg=max(dat.ind$tseg)
#TA
TA<- matrix(0, ntseg, max(dat$TA, na.rm = T))
colnames(TA)<- paste0("y1.",1:max(dat$TA, na.rm = T))
for (j in 1:ntseg){
tmp<- dat.ind %>% filter(tseg == j) %>% dplyr::select(TA) %>% table()
TA[j,as.numeric(names(tmp))]<- tmp
}
#SL
SL<- matrix(0, ntseg, max(dat$SL, na.rm = T))
colnames(SL)<- paste0("y2.",1:max(dat$SL, na.rm = T))
for (j in 1:ntseg){
tmp<- dat.ind %>% filter(tseg == j) %>% dplyr::select(SL) %>% table()
SL[j,as.numeric(names(tmp))]<- tmp
}
id<- rep(unique(dat.ind$id) %>% as.character(), ntseg)
tseg<- 1:ntseg
behav.res<- cbind(id, tseg, TA, SL) %>% data.frame()
View(behav.res)
str(behav.res)
str(SL)
behav.res<- cbind(id, tseg, TA, SL)
str(behav.res)
behav.res<- cbind(tseg, TA, SL) %>% data.frame()
View(behav.res)
str(behav.res)
behav.res<- cbind(tseg, TA, SL) %>% data.frame() %>% cbind(id, .)
View(behav.res)
str(behav.res)
behav.res$id<- as.character(behav.res$id)
str(behav.res)
#------------------------------------------------
get.summary.stats_behav=function(dat){  #dat must have time.seg assigned; for all IDs
#create list of input and to store output
dat.list<- df.to.list(dat = dat)
id<- unique(dat$id) %>% as.character()
n<- length(id)
obs.list<- vector("list", n)
names(obs.list)<- id
#calculate # of obs in each bin (per move param) by tseg
for (i in 1:length(dat.list)) {
dat.ind=dat.list[[i]]
ntseg=max(dat.ind$tseg)
#TA
TA<- matrix(0, ntseg, max(dat$TA, na.rm = T))
colnames(TA)<- paste0("y1.",1:max(dat$TA, na.rm = T))
for (j in 1:ntseg){
tmp<- dat.ind %>% filter(tseg == j) %>% dplyr::select(TA) %>% table()
TA[j,as.numeric(names(tmp))]<- tmp
}
#SL
SL<- matrix(0, ntseg, max(dat$SL, na.rm = T))
colnames(SL)<- paste0("y2.",1:max(dat$SL, na.rm = T))
for (j in 1:ntseg){
tmp<- dat.ind %>% filter(tseg == j) %>% dplyr::select(SL) %>% table()
SL[j,as.numeric(names(tmp))]<- tmp
}
id<- rep(unique(dat.ind$id) %>% as.character(), ntseg)
tseg<- 1:ntseg
behav.res<- cbind(tseg, TA, SL) %>% data.frame() %>% cbind(id, .)
behav.res$id<- as.character(behav.res$id)
obs.list[[i]]<- behav.res
}
#obs<- do.call(rbind.data.frame, obs.list)
obs<- map_dfr(obs.list, `[`)
obs[is.na(obs)]<- 0  #replace NAs w/ zero
obs
}
rm(obs)
obs<- get.summary.stats_behav(dat)  #to run Gibbs sampler on
View(obs)
theta.estim<- apply(theta.estim[,1:3], 1, function(x) x/sum(x)) %>% t()  #normalize probs for only first 3 behaviors being used
theta.estim<- data.frame(id = obs$id, tseg = obs$tseg, theta.estim)
names(theta.estim)<- c("id", "tseg", "Resting","Transit","ARS")  #define behaviors
nobs<- data.frame(id = obs$id, tseg = obs$tseg, n = apply(obs[,11:16], 1, sum)) #calc obs per tseg using SL bins (more reliable than TA)
#Create augmented matrix by replicating rows (tsegs) according to obs per tseg
theta.estim2<- aug_behav_df(dat = dat, theta.estim = theta.estim, nobs = nobs)
#Change into long format
theta.estim.long<- theta.estim2 %>% gather(key, value, -id, -tseg, -time1, -date)
theta.estim.long$date<- theta.estim.long$date %>% as_datetime()
names(theta.estim.long)[5:6]<- c("behavior","prop")
theta.estim.long$behavior<- factor(theta.estim.long$behavior, levels = c("Resting","ARS","Transit"))
#stacked area
ggplot(theta.estim.long) +
geom_area(aes(x=time1, y=prop, fill = behavior), color = "black", size = 0.25,
position = "fill") +
labs(x = "\nObservation", y = "Proportion of Behavior\n") +
scale_fill_viridis_d("Behavior", direction = -1) +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text.y = element_text(size = 14),
axis.text.x.bottom = element_text(size = 12),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
facet_wrap(~id, scales = "free_x")
View(theta.estim)
View(nobs)
View(theta.estim2)
nrow(theta.estim)
i=1
ind<- which(dat$id == theta.estim$id[i] & dat$tseg == theta.estim$tseg[i])
rep(theta.estim[i,], nobs$n[i])
theta.estim2<- rep(theta.estim[i,], nobs$n[i]) %>%
unlist() %>%
matrix(nrow = nobs$n[i], ncol = ncol(theta.estim), byrow = TRUE)
View(theta.estim2)
View(theta.estim)
str(theta.estim)
#Extract and plot proportions of behaviors per time segment
theta.post<- res$theta[(nburn+1):ngibbs,]  #extract samples from posterior
theta.estim<- theta.post %>% apply(2, mean) %>% matrix(nrow(obs), nmaxclust) #calc mean of posterior
#Assign behaviors (via theta) to each time segment
theta.estim<- apply(theta.estim[,1:3], 1, function(x) x/sum(x)) %>% t()  #normalize probs for only first 3 behaviors being used
theta.estim<- data.frame(id = obs$id, tseg = obs$tseg, theta.estim)
theta.estim$id<- as.character(theta.estim$id)
names(theta.estim)<- c("id", "tseg", "Resting","Transit","ARS")  #define behaviors
nobs<- data.frame(id = obs$id, tseg = obs$tseg, n = apply(obs[,11:16], 1, sum)) #calc obs per tseg using SL bins (more reliable than TA)
str(theta.estim)
#Create augmented matrix by replicating rows (tsegs) according to obs per tseg
theta.estim2<- aug_behav_df(dat = dat, theta.estim = theta.estim, nobs = nobs)
View(theta.estim2)
#Change into long format
theta.estim.long<- theta.estim2 %>% gather(key, value, -id, -tseg, -time1, -date)
theta.estim.long$date<- theta.estim.long$date %>% as_datetime()
names(theta.estim.long)[5:6]<- c("behavior","prop")
theta.estim.long$behavior<- factor(theta.estim.long$behavior, levels = c("Resting","ARS","Transit"))
View(theta.estim.long)
#stacked area
ggplot(theta.estim.long) +
geom_area(aes(x=time1, y=prop, fill = behavior), color = "black", size = 0.25,
position = "fill") +
labs(x = "\nObservation", y = "Proportion of Behavior\n") +
scale_fill_viridis_d("Behavior", direction = -1) +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text.y = element_text(size = 14),
axis.text.x.bottom = element_text(size = 12),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
facet_wrap(~id, scales = "free_x")
range(dat$date)
View(theta.estim2)
str(theta.estim2)
for (i in 1:nrow(theta.estim)) {
ind<- which(dat$id == theta.estim$id[i] & dat$tseg == theta.estim$tseg[i])
if (i == 1) {
theta.estim2<- rep(theta.estim[i,], nobs$n[i]) %>%
unlist() %>%
matrix(nrow = nobs$n[i], ncol = ncol(theta.estim), byrow = TRUE)
} else {
tmp<- rep(theta.estim[i,], nobs$n[i]) %>%
unlist() %>%
matrix(nrow = nobs$n[i], ncol = ncol(theta.estim), byrow = TRUE)
theta.estim2<- rbind(theta.estim2, tmp)
}
}
View(theta.estim2)
str(theta.estim2)
colnames(theta.estim2)<- names(theta.estim)
View(theta.estim2)
theta.estim2<- data.frame(theta.estim2, time1 = dat$time1, date = dat$date,
stringsAsFactors = FALSE)
str(theta.estim2)
for (i in 1:nrow(theta.estim)) {
ind<- which(dat$id == theta.estim$id[i] & dat$tseg == theta.estim$tseg[i])
if (i == 1) {
theta.estim2<- rep(theta.estim[i,], nobs$n[i]) %>%
unlist() %>%
matrix(nrow = nobs$n[i], ncol = ncol(theta.estim), byrow = TRUE)
} else {
tmp<- rep(theta.estim[i,], nobs$n[i]) %>%
unlist() %>%
matrix(nrow = nobs$n[i], ncol = ncol(theta.estim), byrow = TRUE)
theta.estim2<- rbind(theta.estim2, tmp)
}
}
colnames(theta.estim2)<- names(theta.estim)
str(theta.estim2)
View(theta.estim2)
theta.estim2[,2:5]<- as.numeric(theta.estim2[,2:5])
View(theta.estim2)
rm(theta.estim2)
for (i in 1:nrow(theta.estim)) {
ind<- which(dat$id == theta.estim$id[i] & dat$tseg == theta.estim$tseg[i])
if (i == 1) {
theta.estim2<- rep(theta.estim[i,], nobs$n[i]) %>%
unlist() %>%
matrix(nrow = nobs$n[i], ncol = ncol(theta.estim), byrow = TRUE)
} else {
tmp<- rep(theta.estim[i,], nobs$n[i]) %>%
unlist() %>%
matrix(nrow = nobs$n[i], ncol = ncol(theta.estim), byrow = TRUE)
theta.estim2<- rbind(theta.estim2, tmp)
}
}
View(theta.estim2)
View(theta.estim)
which(names(theta.estim != "id"))
which(names(theta.estim) != "id")
ind1<- which(names(theta.estim) != "id")
for (i in 1:nrow(theta.estim)) {
ind<- which(dat$id == theta.estim$id[i] & dat$tseg == theta.estim$tseg[i])
if (i == 1) {
theta.estim2<- rep(theta.estim[i,], nobs$n[i]) %>%
unlist() %>%
matrix(nrow = nobs$n[i], ncol = ncol(theta.estim), byrow = TRUE)
} else {
tmp<- rep(theta.estim[i,], nobs$n[i]) %>%
unlist() %>%
matrix(nrow = nobs$n[i], ncol = ncol(theta.estim), byrow = TRUE)
theta.estim2<- rbind(theta.estim2, tmp)
}
}
ind1<- which(names(theta.estim) != "id")
theta.estim2[,ind1]<- as.numeric(theta.estim2[,ind1])
colnames(theta.estim2)<- names(theta.estim)
str(theta.estim2)
is.numeric(theta.estim2[,1])
theta.estim2<- data.frame(theta.estim2, time1 = dat$time1, date = dat$date,
stringsAsFactors = FALSE)
View(theta.estim2)
str(theta.estim2)
theta.estim2[,ind1]<- as.numeric(theta.estim2[,ind1])
names(theta.estim2[ind1[1]])
#------------------------------------------------
aug_behav_df=function(dat, theta.estim, nobs) {  #augment from time segments to observations
for (i in 1:nrow(theta.estim)) {
ind<- which(dat$id == theta.estim$id[i] & dat$tseg == theta.estim$tseg[i])
if (i == 1) {
theta.estim2<- rep(theta.estim[i,], nobs$n[i]) %>%
unlist() %>%
matrix(nrow = nobs$n[i], ncol = ncol(theta.estim), byrow = TRUE)
} else {
tmp<- rep(theta.estim[i,], nobs$n[i]) %>%
unlist() %>%
matrix(nrow = nobs$n[i], ncol = ncol(theta.estim), byrow = TRUE)
theta.estim2<- rbind(theta.estim2, tmp)
}
}
colnames(theta.estim2)<- names(theta.estim)
theta.estim2<- data.frame(theta.estim2, time1 = dat$time1, date = dat$date,
stringsAsFactors = FALSE)
theta.estim2
}
#Create augmented matrix by replicating rows (tsegs) according to obs per tseg
theta.estim2<- aug_behav_df(dat = dat, theta.estim = theta.estim, nobs = nobs)
View(theta.estim2)
str(theta.estim2)
names(theta.estim)[ind1]
theta.estim2<- theta.estim2 %>% mutate_at(names(theta.estim)[ind1], as.numeric)
str(theta.estim2)
View(theta.estim2)
theta.estim.long<- theta.estim2 %>% gather(key, value, -id, -tseg, -time1, -date)
theta.estim.long$date<- theta.estim.long$date %>% as_datetime()
names(theta.estim.long)[5:6]<- c("behavior","prop")
theta.estim.long$behavior<- factor(theta.estim.long$behavior, levels = c("Resting","ARS","Transit"))
#stacked area
ggplot(theta.estim.long) +
geom_area(aes(x=time1, y=prop, fill = behavior), color = "black", size = 0.25,
position = "fill") +
labs(x = "\nObservation", y = "Proportion of Behavior\n") +
scale_fill_viridis_d("Behavior", direction = -1) +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text.y = element_text(size = 14),
axis.text.x.bottom = element_text(size = 12),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
facet_wrap(~id, scales = "free_x")
breed<- data.frame(xmin = as_datetime(c("2018-03-01 00:00:00","2019-03-01 00:00:00")),
xmax = as_datetime(c("2018-06-30 23:59:59","2019-06-30 23:59:59")),
ymin = -Inf, ymax = Inf)
#stacked area
ggplot(theta.estim.long) +
geom_area(aes(x=date, y=prop, fill = behavior), color = "black", size = 0.25,
position = "fill") +
geom_rect(data = breed, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = "grey", alpha = 0.25) +
labs(x = "\nTime", y = "Proportion of Behavior\n") +
scale_fill_viridis_d("Behavior", direction = -1) +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text.y = element_text(size = 14),
axis.text.x.bottom = element_text(size = 12),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
facet_wrap(~id)
#Add cluster assignments to original data; one column for dominant behavior and another for prop/prob to use for alpha of points
dat2<- assign_behav(dat.list = dat.list, theta.estim2 = theta.estim2)
length(dat.list)
#------------------------------------------------
assign_behav=function(dat.list, theta.estim2) {  #assign dominant behavior to observations
for (i in 1:length(dat.list)) {
tmp<- matrix(NA, nrow(dat.list[[i]]), 2)
sub<- theta.estim2[theta.estim2$id == unique(dat.list[[i]]$id),]
for (j in 1:nrow(sub)) {
k<- ncol(theta.estim2)-4  # number of behaviors
ind<- which.max(sub[j,3:(3+k-1)])
tmp[j,1]<- names(ind) %>% as.character()
tmp[j,2]<- round(sub[j,(2+ind)], 3) %>% as.numeric()
}
colnames(tmp)<- c("behav","prop")
dat.list[[i]]<- cbind(dat.list[[i]], tmp)
dat.list[[i]]$behav<- dat.list[[i]]$behav %>% as.character()
dat.list[[i]]$prop<- dat.list[[i]]$prop %>% as.character()
}
#Convert to DF
dat2<- do.call(rbind.data.frame, dat.list)
dat2$prop<- dat2$prop %>% as.numeric()
dat2
}
#Add cluster assignments to original data; one column for dominant behavior and another for prop/prob to use for alpha of points
dat2<- assign_behav(dat.list = dat.list, theta.estim2 = theta.estim2)
dat2$behav<- factor(dat2$behav, levels = c("Resting","ARS","Transit"))
fl<- usa %>% filter(name == "Florida") %>% st_transform(fl, crs = "+init=epsg:32617")
#load map data
usa <- ne_states(country = "United States of America", returnclass = "sf")
fl<- usa %>% filter(name == "Florida") %>% st_transform(fl, crs = "+init=epsg:32617")
# lakes
lakes10 <- ne_download(scale = 10, type = 'lakes', category = 'physical', returnclass = "sf")
lakes10<- sf::st_transform(lakes10, crs = "+init=epsg:32617") %>%
sf::st_crop(xmin = min(dat$x-20000), xmax = max(dat$x+20000), ymin = min(dat$y-20000),
ymax = max(dat$y+20000))
# Facet plot of maps
ggplot() +
geom_sf(data = fl) +
geom_sf(data = lakes10, fill = "lightblue", alpha = 0.65) +
coord_sf(xlim = c(min(dat$x-120000), max(dat$x+40000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_path(data = dat2, aes(x=x, y=y), color="gray60", size=0.25) +
geom_point(data = dat2, aes(x, y, fill=behav), size=2.5, pch=21, alpha=dat2$prop) +
scale_fill_viridis_d("Behavior", direction = -1) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(axis.title = element_text(size = 16),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
guides(fill = guide_legend(label.theme = element_text(size = 12),
title.theme = element_text(size = 14))) +
facet_wrap(~id)
#Extract and plot proportions of behaviors per time segment
theta.post<- res$theta[(nburn+1):ngibbs,]  #extract samples from posterior
theta.estim<- theta.post %>% apply(2, mean) %>% matrix(nrow(obs), nmaxclust) #calc mean of posterior
boxplot(theta.estim, xlab="Behavior", ylab="Probability of Behavior Occurrence")
#Determine proportion of behaviors (across all time segments)
#Possibly set threshold below which behaviors are excluded
round(apply(theta.estim, 2, sum)/nrow(theta.estim), digits = 3)
#Determine proportion of behaviors (across all time segments)
#Possibly set threshold below which behaviors are excluded
round(apply(theta.estim, 2, sum)/nrow(theta.estim), digits = 3)[1:3] %>% sum()
behav.res<- get_behav_hist(res)
#Plot histograms of frequency data; order color scale from slow to fast
ggplot(behav.res, aes(x = bin, y = count, fill = as.factor(behav))) +
geom_bar(stat = 'identity') +
labs(x = "\nBin", y = "Frequency\n") +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text.y = element_text(size = 14),
axis.text.x.bottom = element_text(size = 12),
strip.text = element_text(size = 14), strip.text.x = element_text(face = "bold")) +
scale_fill_manual(values = viridis(n=3)[c(1,3,2)], guide = F) +
facet_grid(param ~ behav, scales = "free_y")
#Plot histograms of frequency data; order color scale from slow to fast
ggplot(behav.res, aes(x = bin, y = count, fill = as.factor(behav))) +
geom_bar(stat = 'identity') +
labs(x = "\nBin", y = "Frequency\n") +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text.y = element_text(size = 14),
axis.text.x.bottom = element_text(size = 12),
strip.text = element_text(size = 14), strip.text.x = element_text(face = "bold")) +
facet_grid(param ~ behav, scales = "free_y")
#Plot histograms of frequency data; order color scale from slow to fast
ggplot(behav.res, aes(x = bin, y = prop, fill = as.factor(behav))) +
geom_bar(stat = 'identity') +
labs(x = "\nBin", y = "Frequency\n") +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text.y = element_text(size = 14),
axis.text.x.bottom = element_text(size = 12),
strip.text = element_text(size = 14), strip.text.x = element_text(face = "bold")) +
facet_grid(param ~ behav, scales = "free_y")
# Facet plot of maps
ggplot() +
geom_sf(data = fl) +
geom_sf(data = lakes10, fill = "lightblue", alpha = 0.65) +
coord_sf(xlim = c(min(dat$x-120000), max(dat$x+40000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_path(data = dat2, aes(x=x, y=y), color="gray60", size=0.25) +
geom_point(data = dat2, aes(x, y, fill=behav), size=2.5, pch=21, alpha=dat2$prop) +
scale_fill_viridis_d("Behavior", direction = 1) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(axis.title = element_text(size = 16),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
guides(fill = guide_legend(label.theme = element_text(size = 12),
title.theme = element_text(size = 14))) +
facet_wrap(~id)
